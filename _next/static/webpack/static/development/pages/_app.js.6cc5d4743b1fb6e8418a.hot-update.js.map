{"version":3,"file":"static/webpack/static/development/pages/_app.js.6cc5d4743b1fb6e8418a.hot-update.js","sources":["webpack:///./components/Layout/index.js","webpack:///./components/Layout/useWindowSize.js"],"sourcesContent":["import AppBar from './AppBar'\nimport Drawer from './Drawer'\nimport { useState } from 'react'\nimport { TopAppBarFixedAdjust } from '@material/react-top-app-bar'\n\nimport useWindowSize from './useWindowSize'\n\nconst Layout = ({ children }) => {\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false)\n  const { innerWidth } = useWindowSize()\n  return (\n    <>\n      <div className='layout-container'>\n        <Drawer\n          isOpen={isDrawerOpen}\n          setIsDrawerOpen={setIsDrawerOpen}\n        />\n        <div className='layout-app-content'>\n          <AppBar\n            setIsDrawerOpen={setIsDrawerOpen}\n          />\n          <TopAppBarFixedAdjust>\n            {innerWidth} innerwidth\n            {children}\n          </TopAppBarFixedAdjust>\n        </div>\n      </div>\n      <style jsx>{`\n        @media (min-width: 840px) {\n          .layout-container {\n            display: flex;\n            flex-direction: row;\n            height: 100vh;\n            overflow: hidden;\n          }\n          .layout-app-content {\n            flex: auto;\n            overflow: auto;\n          }\n        }\n      `}</style>\n    </>\n  )\n}\n\nexport default Layout\n","import { useState, useEffect } from 'react'\nimport throttle from 'lodash.throttle'\n\nconst THROTTLE_LIMIT = 300\n\nconst DEFAULT_SIZE = {\n  innerHeight: 1000,\n  innerWidth: 1000,\n  outerHeight: 1000,\n  outerWidth: 1000,\n}\n\nconst getSize = () => {\n  if (typeof window === 'undefined') {\n    return DEFAULT_SIZE\n  }\n  return {\n    innerHeight: window.innerHeight,\n    innerWidth: window.innerWidth,\n    outerHeight: window.outerHeight,\n    outerWidth: window.outerWidth,\n  }\n}\n\nconst useWindowSize = () => {\n  const [windowSize, setWindowSize] = useState(getSize())\n\n  const handleResize = throttle(\n    () => {\n      setWindowSize(getSize())\n    },\n    THROTTLE_LIMIT,\n  )\n\n  useEffect(() => {\n    // need to check for ssr here?\n    window.addEventListener('resize', handleResize)\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [])\n\n  return windowSize\n}\n\nexport default useWindowSize\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAAA;AAAA;AAgCA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA,eAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;A","sourceRoot":""}